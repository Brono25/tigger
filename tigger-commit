#!/bin/dash


. tigger-utilities
. tigger-file_state
check_repo_exists



  #################
 #    Defines    #
#################

COMMIT_DIR="$REPO/commit/$("find_where_head_points")" #is the active commit dir
OPTION_A=$FALSE
OPTION_M=$FALSE

CHANGES_TO_COMMIT_2=$NONE_FOUND                                     
CHANGES_TO_COMMIT_3=$INDEX_ONLY                  
CHANGES_TO_COMMIT_4=$IND_AND_PWD                   
CHANGES_TO_COMMIT_5=$DELTA_IND_PWD              
CHANGES_TO_COMMIT_6=$REP_ONLY                   
CHANGES_TO_COMMIT_7=$REP_AND_PWD                 
CHANGES_TO_COMMIT_8=$DELTA_REP_PWD             
#CHANGES_TO_COMMIT_9=$REP_AND_IND                  
CHANGES_TO_COMMIT_10=$DELTA_REP_IND               
CHANGES_TO_COMMIT_11=$DELTA_REP_IND_DELTA_REP_PWD 
CHANGES_TO_COMMIT_12=$DELTA_REP_IND_DELTA_IND_PWD
CHANGES_TO_COMMIT_13=$ALL_DIFFERENT 

  #################
 #   Functions   #
#################


#retreives the latest commit number
find_commit_number()
{
	next_commit=$(ls "$REPO/commit"|wc -l |xargs)
	echo -n "$next_commit"
}


#TODO: make this function log seperatley for different branches
#logs commits messages into '.log'
log_comment()
{
	
	commit="$1"
	comment="$2"

	if [ ! -s "$REPO/.log" ]
	then
		echo "$1 $2" > "$REPO/.log"
	else 
		tmp=$(cat -- "$REPO/.log")
		echo  "$1 $2" > "$REPO/.log"
		echo "$tmp" >> "$REPO/.log"
	fi

}


# Merging two branches will require a common ancestor branch to compare with.
# This function will create a hidden file in each commit which will keep track 
# of each commits lineage so that it will be easy to find the last common 
# ancestor between any two commits.
# for example           the lineage of commit 5 may be: 5->4->1->0->NULL
# and the lineage of commit 3 on another branch may be: 3->2->1->0->NULL
# The last common ancestor of both commits can easily be found as commit 1.
# Hence, when merging the branches pointing to commit 5 and 3, commit 1 will be used
# as the base of comparison. 
create_lineage()
{
	parent_commit=$1
	next_commit=$2

	if [ "$parent_commit" = "NULL" ]
	then
		echo -n '0->NULL' > "$REPO/commit/$next_commit/.lineage" || 
		die "$PRGRM: error: unable to create .lineage"
		
	else
		curr_lineage=$(sed "s/^/$next_commit->/" "$REPO/commit/$parent_commit/.lineage")
		echo -n "$curr_lineage" > "$REPO/commit/$next_commit/.lineage" || 
		die "$PRGRM: error: unable to append .lineage"
	fi
}



#files in the index that are not in the pwd will be removed
#files in the pwd which are different to the index will be
#updated 
update_index()
{
	for file in "$INDEX_DIR"/* 
	do 

		file_name=$(basename "$file")

		is_file_in_pwd "$PWD/$file_name"
		if [ $? -eq $FALSE ]
		then
			rm -f "$INDEX_DIR/$file_name"
			continue
		fi

		is_file_in_pwd_diff_to_index "$PWD/$file_name" "$INDEX_DIR/$file_name"
		if	[ $? -eq $TRUE ]
		then
			cp "$PWD/$file_name" "$INDEX_DIR/$file_name"
			continue
		fi
	done

}


is_anything_to_commit()
{

	[ $# -eq 0 ] && return $FALSE

	for file in $@
	do
		file_status="$(find_files_state "$file" 'HEAD')"

		#echo "file = $file_status"

	  [ "$file_status" = "$CHANGES_TO_COMMIT_2" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_3" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_4" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_5" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_6" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_7" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_8" ]  && return $TRUE
	  #[ "$file_status" = "$CHANGES_TO_COMMIT_9" ]  && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_10" ] && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_11" ] && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_12" ] && return $TRUE
	  [ "$file_status" = "$CHANGES_TO_COMMIT_13" ] && return $TRUE
	done

	return $FALSE
}





  #################
 #     Main      #
#################


curr_branch="$(find_head)"
parent_commit=$(basename "$COMMIT_DIR")
next_commit=$(find_commit_number)


# -m option needs a message
# -a updates files in index 
while getopts ':am' opt
do
  case "$opt" in 
		a) OPTION_A=$TRUE;;
		m) OPTION_M=$TRUE;;	
		\?)die "usage: $PRGRM [-a] -m commit-message";;

  esac
done

#if option -m present then check for message
if [ "$OPTION_M" -eq "$TRUE" ] 
then
	shift "$(($OPTIND - 1))"
	message="$@"
fi

#if no message given
[ -n "$message" ] || die "usage: $PRGRM [-a] -m commit-message"

#perform option A
[ "$OPTION_A" -eq "$TRUE" ] && update_index

#check for anything to commit
file_list="$(basename --multiple "$COMMIT_DIR"/* "$INDEX_DIR"/* "$PWD"/* |sort|uniq|sed '/*/d' |xargs)"
is_anything_to_commit $file_list || die_stdout "nothing to commit"


#do commit

#create new commit
mkdir "$REPO/commit/$next_commit" || die "$PRGRM: error: unable to create commit directory $next_commit"

#update the branch so that it now points to this latest commit
echo "$next_commit" > "$REPO/heads/$curr_branch" 


create_lineage "$parent_commit" "$next_commit"


#Copy contents of index to next_commit
cp -aT "$REPO/index" "$REPO/commit/$next_commit" 
echo "Committed as commit $next_commit"

log_comment "$next_commit" "$@"














