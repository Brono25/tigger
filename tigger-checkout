#!/bin/dash


. tigger-utilities
. tigger-file_state
check_repo_exists

trap 'rm -f .tmp' EXIT INT

  #################
 #    Defines    #
#################

COMMIT_DIR="$REPO/commit/$("find_where_head_points")" 
ERROR_FOUND=1
ERROR_MSG="$PRGRM: error: Your changes to the following files would be overwritten by checkout:"



DELETED="$D1_ONLY"  
CHANGES_NOT_STAGED="$DELTA_D2_D3_DELTA_D1_D3" 
DIFF_CHANGES_STAGED_1="$ALL_DIFFERENT"
DIFF_CHANGES_STAGED_2="$DELTA_D1_D2_DELTA_D2_D3"
CHANGES_STAGED="$DELTA_D1_D2_DELTA_D1_D3"
DELETED_STAGED="$DELTA_D1_D2" 
UNTRACKED_1="$D3_ONLY"
UNTRACKED_2="$DELTA_D1_D3"
UNTRACKED_3="$D1_AND_D3" 
ADDED_TO_INDEX_FILE_CHANGED="$DELTA_D2_D3"
ADDED_TO_INDEX="$D2_AND_D3"
ADDED_TO_INDEX_FILE_DELETED="$D2_ONLY" 

  #################
 #   Functions   #
#################

remove_files_from_pwd_excluding_untracked()
{
  for file in "$PWD"/*
  do
    [ "$file" = '*' ] && return 0

    file=$(basename "$file")
    status=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")
    if [ ! "$status" = "$UNTRACKED_1" ] && [ ! "$status" = "$UNTRACKED_2" ]
    then
       rm -f "$PWD/$file"
    fi
  done
  return 0
}

update_pwd_from_index()
{
  remove_files_from_pwd_excluding_untracked
  cp -rT "$REPO/index" "$PWD/"

}

update_index_from_commit()
{
  commit="$1"
  rm "$REPO/index"/*
  cp "$REPO/commit/$commit"/* "$REPO/index"
}



  #################
 #     Main      #
#################



checkout_branch_name="$1"
current_commit="$(find_where_head_points)"
COMMIT_DIR="$REPO/commit/$current_commit"

[ "$current_commit" = "NULL" ] && die "$PRGRM: error: this command can not be run until after the first commit" 
[ $# -ne 1 ]                   && die "usage: $PRGRM <branch>" 
[ -f "$REPO/heads/$checkout_branch_name" ] || die "$PRGRM: error: unknown branch '$checkout_branch_name'" 



checkout_commit=$(find_where_branch_points "$checkout_branch_name")





# If new branch being checked out points to same commit as the one it branched from
# then no commits have happened yet for this branch 
# which changes the behaviour of checkout.
if [ "$checkout_commit" -ne "$current_commit" ]
then
 
  #before checkout can proceed must check the status of all the 
  #files in pwd, index and current repo commit. Some status's
  #will throw an error and prevent checkout.


  find  "$COMMIT_DIR"/ "$INDEX_DIR"/ "$PWD"/ -maxdepth 1  -type f  -not -name '.*' |xargs -I@ basename "@"|sort|uniq|

  while IFS='' read -r file
  do
    status=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")

    
    [ "$status" = "$DELETED" ]               &&  echo "$file"
    [ "$status" = "$CHANGES_NOT_STAGED" ]    &&  echo "$file"
    [ "$status" = "$DIFF_CHANGES_STAGED_1" ] &&  echo "$file"
    [ "$status" = "$DIFF_CHANGES_STAGED_2" ] &&  echo "$file"
    [ "$status" = "$CHANGES_STAGED" ]        &&  echo "$file"
    [ "$status" = "$DELETED_STAGED" ]        &&  echo "$file"
    # [ "$status" = "$UNTRACKED_1" ]           &&  echo -n "$file " 
    # [ "$status" = "$UNTRACKED_2" ]           &&  echo -n "$file " 
    [ "$status" = "$UNTRACKED_3" ]           &&  echo "$file"
    #[ "$status" = "$ADDED_TO_INDEX_FILE_CHANGED" ] &&  echo "$file"
    #[ "$status" = "$ADDED_TO_INDEX" ]              &&  echo "$file"
    #[ "$status" = "$ADDED_TO_INDEX_FILE_DELETED" ] &&  echo "$file"


  done > '.tigger/.tmp'



  if [ -s '.tigger/.tmp' ]
  then
    echo "$ERROR_MSG"
    cat '.tigger/.tmp'|sort 
    exit 1
  fi
  
 
  update_index_from_commit "$checkout_commit"
  remove_files_from_pwd_excluding_untracked
  update_pwd_from_index


fi



# update head to branch being checked out
echo -n "$checkout_branch_name" > "$REPO/HEAD"
echo "Switched to branch '$checkout_branch_name'"
exit 0




