#!/bin/dash


. tigger-utilities
. tigger-file_state
check_repo_exists

trap 'rm -f .tigger/.tmp' EXIT INT

  #################
 #    Defines    #
#################

COMMIT_DIR="$REPO/commit/$("find_where_head_points")" 
ERROR_MSG="$PRGRM: error: Your changes to the following files would be overwritten by checkout:"



  #################
 #   Functions   #
#################

remove_files_from_pwd_excluding_untracked()
{
  for file in "$PWD"/*
  do
    [ "$file" = '*' ] && return 0

    file=$(basename "$file")
    status1=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")
    if [ ! "$status1" = "$DELTA_REP_PWD" ] && [ ! "$status1" = "$PWD_ONLY" ]
    then
       rm -f "$PWD/$file"
    fi
  done
  return 0
}

update_pwd_from_index()
{
  remove_files_from_pwd_excluding_untracked
  cp -rT "$REPO/index" "$PWD/"

}

update_index_from_commit()
{
  commit="$1"
  rm "$REPO/index"/*
  cp "$REPO/commit/$commit"/* "$REPO/index"
}



  #################
 #     Main      #
#################

checkout_branch_name="$1"
current_commit="$(find_where_head_points)"
COMMIT_DIR="$REPO/commit/$current_commit"

[ "$current_commit" = "NULL" ] && die "$PRGRM: error: this command can not be run until after the first commit" 
[ $# -ne 1 ]                   && die "usage: $PRGRM <branch>" 
[ -f "$REPO/heads/$checkout_branch_name" ] || die "$PRGRM: error: unknown branch '$checkout_branch_name'" 

current_branch="$(find_head)"
[ "$checkout_branch_name" =  "$current_branch" ] && die_stdout "Already on '$current_branch'" 


checkout_commit=$(find_where_branch_points "$checkout_branch_name")


# If new branch being checked out points to same commit as the one it branched from
# then no commits have happened yet for this branch 
# which changes the behaviour of checkout.
if [ "$checkout_commit" -ne "$current_commit" ]
then
 
  #before checkout can proceed must check the status1 of all the 
  #files in pwd, index and current repo commit. Some status1's
  #will throw an error and prevent checkout.
  find "$COMMIT_DIR"/ "$INDEX_DIR"/ "$PWD"/ -maxdepth 1  -type f  -not -name '.*'|xargs -I@ basename "@"|sort|uniq|

  while read -r file
  do
    status1=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")
    status2=$(find_files_state "$file" "$REPO/commit/$checkout_commit" "$INDEX_DIR" "$PWD")

    [ "$status1" = "$REP_ONLY" ]                    &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$DELTA_IND_PWD_DELTA_REP_PWD" ] &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$ALL_DIFFERENT" ]               &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$DELTA_REP_IND_DELTA_IND_PWD" ] &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$DELTA_REP_IND_DELTA_REP_PWD" ] &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$DELTA_REP_IND" ]               &&  echo "$file" >> '.tigger/.tmp'
    [ "$status1" = "$REP_AND_PWD" ]                 &&  echo "$file" >> '.tigger/.tmp'
    [ "$status2" = "$DELTA_REP_PWD" ]               &&  echo "$file" >> '.tigger/.tmp'
    [ "$status2" = "$ALL_DIFFERENT" ]               &&  echo "$file" >> '.tigger/.tmp'

  done 

  #if this file has size then errors happened
  if [ -s '.tigger/.tmp' ]
  then
    echo "$ERROR_MSG" 1>&2
    sort < '.tigger/.tmp' |uniq 1>&2
    exit 1
  fi
  
 
  update_index_from_commit "$checkout_commit"
  remove_files_from_pwd_excluding_untracked
  update_pwd_from_index


fi

# update head to branch being checked out
echo -n "$checkout_branch_name" > "$REPO/HEAD"
echo "Switched to branch '$checkout_branch_name'"
exit 0




