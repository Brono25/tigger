#!/bin/dash


. tigger-utilities
. tigger-file_state
check_repo_exists


trap 'rm -f $REPO/.error_files $REPO/.cp_files $REPO/.list' EXIT INT





  #################
 #    Defines    #
#################

OPTION_M=$FALSE
COMMIT_GIVEN=$FALSE
COMMIT_DIR="$REPO/commit/$("find_where_head_points")"


  #################
 #   Functions   #
#################

remove_files_from_pwd_excluding_untracked()
{
  for file in "$PWD"/*
  do
    [ "$file" = '*' ] && return 0

    file=$(basename "$file")
    status=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")

    if [ ! "$status" = "$PWD_ONLY" ] && [ ! "$status" = "$DELTA_REP_PWD" ]
    then
       rm -f "$PWD/$file"
    fi
  done
  return 0
}

update_pwd_from_index()
{
  remove_files_from_pwd_excluding_untracked
  cp -rT "$REPO/index" "$PWD/"

}

update_index_from_commit()
{

  commit="$1"
  rm "$REPO/index"/*
  cp "$REPO/commit/$commit"/* "$REPO/index"
  
}

find_common_ancestor_commit()
{
  commit_1="$1"
  commit_2="$2"

  
  lineage_1=$(cat "$REPO/commit/$commit_1/.lineage")
  lineage_2=$(cat "$REPO/commit/$commit_2/.lineage")

  l1="$lineage_1"
  while [ "$l1" != 'NULL' ]
  do
    c1=${l1%%->*}
    l2="$lineage_2"
    while [ "$l2" != 'NULL' ]
    do
      c2=${l2%%->*}

      if [ "$c1" -eq "$c2" ]
      then
        echo "$c1"
        return 0
      fi
      l2=$(echo "$l2" | sed -E 's/^[0-9]+->(.*)/\1/')
    done
    l1=$(echo "$l1" | sed -E 's/^[0-9]+->(.*)/\1/')
  done

  return 1
}



is_commit_on_branch()
{
  commit="$1"
  branch_name="$2"
  # FOUND="$FALSE"

  branch_lineage=$(cat "$REPO/commit/$(find_where_branch_points "$branch_name")/.lineage")

  # branches_head_commit="${branch_lineage%%->*}"
  b="$branch_lineage"
  while [ "$b" != 'NULL' ]
  do
      if [ "${b%%->*}" -eq "$commit" ]
      then
        return "$TRUE"
      fi
      b=$(echo "$b" | sed -E 's/^[0-9]+->(.*)/\1/')
  done

  return "$FALSE"
}

remove_files_from_pwd_excluding_untracked()
{
  for file in "$PWD"/*
  do
    [ "$file" = '*' ] && return 0

    file=$(basename "$file")
    status=$(find_files_state "$file" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")
    if [ ! "$status" = "$UNTRACKED_1" ] && [ ! "$status" = "$UNTRACKED_2" ]
    then
       rm -f "$PWD/$file"
    fi
  done
  return 0
}

update_pwd_from_index()
{
  remove_files_from_pwd_excluding_untracked
  cp -rT "$REPO/index" "$PWD/"

}

update_index_from_commit()
{
  commit="$1"
  rm "$REPO/index"/*
  cp "$REPO/commit/$commit"/* "$REPO/index"
}

log_comment()
{
  
  commit="$1"
  branch="$2"
  comment="$3"

  LOG_PATH="$REPO/logs"

  if [ ! -s "$LOG_PATH/$branch" ]
  then
    echo "$commit $comment" > "$LOG_PATH/$branch"
  else 
    tmp=$(cat -- "$LOG_PATH/$branch")
    echo  "$commit $comment" > "$LOG_PATH/$branch"
    echo "$tmp" >> "$LOG_PATH/$branch"
  fi
}

  #################
 #     Main      #
#################

#  ------  usage checking
[ $# -eq 1 ] && die "$PRGRM: error: empty commit message"
[ $# -eq 3 ] || die "usage: $PRGRM <branch|commit> -m message"

merge_to="$1"

shift 1

# -m option needs a message
while getopts ':m' opt
do
  case "$opt" in 
    m) OPTION_M=$TRUE;; 
    \?)die "usage: $PRGRM <branch|commit> -m message";;
  esac
done

#if option -m present then check for message
if [ "$OPTION_M" -eq "$TRUE" ] 
then
  shift "$((OPTIND - 1))"
  message="$1"
fi

#test if branch is a number or string and if the branches exist.
if [ "$merge_to" -eq "$merge_to" ] 2>/dev/null
then
  COMMIT_GIVEN=$TRUE
  [ -f "$REPO/heads/$merge_to" ] || die "$PRGRM: error: unknown branch '$merge_to'"
else
  [ -f "$REPO/heads/$merge_to" ] || die "$PRGRM: error: unknown branch '$merge_to'"
fi

#if no message given
[ -n "$message" ] || die "$PRGRM: error: empty commit message"






#-------------------- IF BRANCH GIVEN ---------------------
if [ "$COMMIT_GIVEN" -eq "$FALSE" ]
then
	
  #find the commit numbers of current branch and merge branch and the 
  #most recent commit they share in common.
  curr_commit="$(find_where_head_points)"
  merge_commit=$(find_where_branch_points "$merge_to")
  common_commit=$(find_common_ancestor_commit "$curr_commit" "$merge_commit")
  curr_branch="$(find_head)"
  branch_to_merge_with="$merge_to"



#-------------------- IF COMMIT GIVEN ---------------------
else

  curr_commit=$(find_where_head_points)
  merge_commit="$merge_to"
  common_commit=$(find_common_ancestor_commit "$curr_commit" "$merge_commit")
  curr_branch="$(find_head)"
  branch_to_merge_with="NULL"
fi

[ "$curr_commit" -eq "$merge_commit" ] && die "Already up to date"




#-------------------- FAST-FORWARD CONDITION ---------------------
#fast forward happens when two branch names lie in the same branch.
#if this is the case and the 'merge to' branch is a more recent commit then
#the 'merge from' branch, then it is pointed to this new location without making a commit.
#if vice versa then throw already up to date error.

is_commit_on_branch "$curr_commit"  "$branch_to_merge_with"
if [ $? -eq  "$TRUE" ]
then
  if [ "$curr_commit" -lt "$merge_commit" ]
    then
      echo "Fast-forward: no commit created"
      update_index_from_commit "$merge_commit"
      remove_files_from_pwd_excluding_untracked
      update_pwd_from_index
      echo "$merge_commit" > "$REPO/heads/$curr_branch" #update branch to point to the same commit
      #update log
      cp -a "$REPO/logs/$branch_to_merge_with" "$REPO/logs/$curr_branch" 
      exit 0
    else
      is_commit_on_branch "$merge_commit" "$curr_branch"  && die "Already up to date"
  fi
fi


#-------------------- DO MERGE ---------------------
#check the states of each file with respect to:
#status1: pwd  current_commit and index
#status2: the current commit, the commit to merge to and the common ancestor commit
#
#lists are made. 1 list for error messages and 1 list for files to copy.
#if error message list has more than 0 bytes, then the merge aborts.
  next_commit=$(find "$REPO/commit/" -maxdepth 1|wc -l)
  next_commit=$((next_commit - 1))

  dir1="$REPO/commit/$curr_commit"
  dir2="$REPO/commit/$merge_commit"
  dir3="$REPO/commit/$common_commit"


  find  "$dir1" "$dir2" "$dir3" -maxdepth 1  -type f  -not -name '.*' | sort > "$REPO/.list" 
  while read -r file 
  do

    status1=$(find_files_state "$(basename "$file")" "$COMMIT_DIR" "$INDEX_DIR" "$PWD")
    error_msg="$PRGRM: error: can not merge: local changes to files"
   
    [ "$status1" = "$INDEX_ONLY" ]                  && die "$error_msg"
    [ "$status1" = "$IND_AND_PWD" ]                 && die "$error_msg"
    [ "$status1" = "$DELTA_IND_PWD" ]               && die "$error_msg"
    [ "$status1" = "$REP_ONLY" ]                    && die "$error_msg"
    [ "$status1" = "$REP_AND_PWD" ]                 && die "$error_msg"
    [ "$status1" = "$DELTA_REP_PWD" ]               && die "$error_msg"
    [ "$status1" = "$DELTA_REP_IND" ]               && die "$error_msg"
    [ "$status1" = "$DELTA_REP_IND_DELTA_REP_PWD" ] && die "$error_msg"
    [ "$status1" = "$DELTA_REP_IND_DELTA_IND_PWD" ] && die "$error_msg"
    [ "$status1" = "$ALL_DIFFERENT" ]               && die "$error_msg"


    status2=$(find_files_state "$(basename "$file")" "$dir1" "$dir2" "$dir3")

    file_name="$(basename "$file")"

    [ "$status2" = "$DELTA_D2_D3" ]   && echo "$file_name">>"$REPO/.error_files"
    [ "$status2" = "$DELTA_D1_D3" ]   && echo "$file_name">>"$REPO/.error_files"
    [ "$status2" = "$DELTA_D1_D2" ]   && echo "$file_name">>"$REPO/.error_files"
    [ "$status2" = "$ALL_DIFFERENT" ] && echo "$file_name">>"$REPO/.error_files"

    [ "$status2" = "$D1_AND_D2" ]  && echo "$dir2/$file_name" >>"$REPO/.cp_files"
    [ "$status2" = "$D2_ONLY" ]    && echo "$dir2/$file_name" >>"$REPO/.cp_files"
    [ "$status2" = "$D1_ONLY" ]    && echo "$dir1/$file_name" >>"$REPO/.cp_files"
    [ "$status2" = "$ALL_SAME" ]   && echo "$dir2/$file_name" >>"$REPO/.cp_files"

    [ "$status2" = "$DELTA_D2_D3_DELTA_D1_D3" ] && echo "$dir1/$file_name" >>"$REPO/.cp_files"
    [ "$status2" = "$DELTA_D1_D2_DELTA_D1_D3" ] && echo "$dir1/$file_name" >>"$REPO/.cp_files"
    [ "$status2" = "$DELTA_D1_D2_DELTA_D2_D3" ] && echo "$dir2/$file_name" >>"$REPO/.cp_files"

  done < "$REPO/.list"



  #if this file has a size then an error happened
  if [ -s "$REPO/.error_files" ] 
  then
    echo "$PRGRM: error: These files can not be merged:"
    sort <"$REPO/.error_files" |uniq


  else

    echo "Committed as commit $next_commit"
    mkdir -- "$REPO/commit/$next_commit"
   
    while read -r file 
    do
      cp "$file" "$REPO/commit/$next_commit"

    done <"$REPO/.cp_files"
    

    update_index_from_commit "$next_commit"
    remove_files_from_pwd_excluding_untracked
    update_pwd_from_index

    # update branch pointer
    echo -n "$next_commit" > "$REPO/heads/$curr_branch"

    #log commit
    branch="$(find_head)"
    log_comment "$next_commit" "$branch" "$message"


    #merge logs
    log1="$REPO/logs/$curr_branch"
    log1_tmp="$REPO/logs/${curr_branch}_tmp"
    log2="$REPO/logs/$branch_to_merge_with"

    # a tmp name change is used as you cant cat a file and redirect that 
    # the output into the same file
    mv "$log1" "$log1_tmp" || die "failed to rename"
    cat "$log1_tmp" "$log2" |sort -rn |uniq > "$log1"
    rm -f "$log1_tmp"

    exit 0
    
  fi 




  





























